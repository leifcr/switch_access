// Generated by CoffeeScript 1.2.1-pre

/*
 Switch Access for webpages
 (c) 2012 Leif Ringstad
 Licensed under the freeBSD license (see license.txt)
 Source: http://github.com/leifcr/switch_access
 v 1.0.1
*/


(function() {
  var SwitchAccess,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SwitchAccess = (function() {

    SwitchAccess.name = 'SwitchAccess';

    function SwitchAccess(options) {
      if (window['__switch_access_sci'] !== void 0) {
        window.__switch_access_sci.setoptions(options);
        return window.__switch_access_sci;
      }
      window.__switch_access_sci = this;
      this.options = {
        number_of_switches: 0,
        keys_1: [32, 13],
        keys_2: [[32], [13]],
        element_class: "switch-element",
        highlight_element_id: "switch-highlight-element",
        highlight_element_activate_class: "switch-highlight-element-activate",
        hide_show_delay: 500,
        move_fade_delay: 200,
        pulsate: false,
        sort_element_list_after_numbers: true,
        debug: false,
        margin_to_element: 5,
        fields_where_keys_should_be_accepted: ["search"],
        use_highlight_div: true,
        highlight_element_class: "switch-highlight",
        activate_element_class: "switch-highlight-activate",
        single_switch_move_time: 1500,
        delay_before_activating_element: 0,
        activate_first_link: true,
        delay_for_allowed_keypress: 250,
        single_switch_restart_on_activate: true,
        highlight_on_activate_time: 1000,
        ensure_visible_element: true,
        scroll_offset: 15,
        animate_scroll_time: 200,
        easing: "linear"
      };
      this.runtime = {
        active: false,
        current_element: null,
        current_element_idx: 0,
        next_element_idx: 0,
        element_list: null,
        highlightdiv: null,
        single_switch_timer_id: null,
        action_triggered: false,
        keypress_allowed: true,
        element_to_click: null
      };
      jQuery.extend(this.options, options);
      this.init();
    }

    SwitchAccess.prototype.init = function() {
      var appender;
      if (this.options.debug) {
        this.logger = log4javascript.getLogger();
        appender = new log4javascript.InPageAppender("logger");
        appender.setWidth("100%");
        appender.setHeight("100%");
        appender.setThreshold(log4javascript.Level.ALL);
        this.logger.addAppender(appender);
      }
      this.log("init");
      this.readOptionsFromCookies();
      this.buildElementList();
      return this.start();
    };

    SwitchAccess.prototype.setoptions = function(options) {
      this.log("setoptions");
      this.log(options);
      this.stop();
      jQuery.extend(this.options, options);
      return this.start();
    };

    SwitchAccess.prototype.log = function(msg, raw) {
      if (raw == null) raw = false;
      if (this.options.debug) {
        if (raw) {
          return this.logger.debug(msg);
        } else {
          return this.logger.debug("SwitchAccess: " + msg);
        }
      }
    };

    SwitchAccess.prototype.readOptionsFromCookies = function() {
      if (jQuery.isFunction($.cookie)) {
        this.log("read options from cookies");
        if ($.cookie('number_of_switches') !== null) {
          this.options.number_of_switches = $.cookie('number_of_switches');
        }
        if ($.cookie('keys_1') !== null) this.options.keys_1 = $.cookie('keys_1');
        if ($.cookie('keys_2') !== null) this.options.keys_2 = $.cookie('keys_2');
        if ($.cookie('single_switch_move_time') !== null) {
          return this.options.single_switch_move_time = $.cookie('single_switch_move_time');
        }
      }
    };

    SwitchAccess.prototype.buildElementList = function() {
      var msg, search_regexp_class, search_regexp_num, temp_list;
      if (this.options.sort_element_list_after_numbers === true) {
        temp_list = $("[class*=" + this.options.element_class + "-]");
        if ($("." + this.options.element_class).length > 0) {
          msg = "Warning! Elements without numbers found and sort_element_list_after_numbers is set to true.";
          console.log("SwitchAccess: " + msg);
          this.log(msg);
        }
      } else {
        temp_list = $("." + this.options.element_class);
      }
      this.log("buildElementList: count:" + temp_list.length + ", class-name: " + this.options.element_class);
      if (this.options.sort_element_list_after_numbers === true) {
        this.log("sorting list");
        search_regexp_class = RegExp("" + this.options.element_class + "-\\d+");
        search_regexp_num = /\d+/;
        temp_list.sort(function(a, b) {
          var item_class_name_a, item_class_name_b, num_a, num_b;
          item_class_name_a = search_regexp_class.exec($(a).attr("class"));
          item_class_name_b = search_regexp_class.exec($(b).attr("class"));
          num_a = 0;
          num_b = 0;
          if (item_class_name_a !== null && item_class_name_b !== null) {
            num_a = search_regexp_num.exec(item_class_name_a);
            num_b = search_regexp_num.exec(item_class_name_b);
          }
          window.__switch_access_sci.log("Sort: " + num_a + " " + num_b);
          return num_a - num_b;
        });
      }
      return this.runtime.element_list = temp_list;
    };

    SwitchAccess.prototype.deinit = function() {
      this.log("deinit");
      this.stop();
      return this.removeHighlightdiv();
    };

    SwitchAccess.prototype.start = function() {
      if (this.options.number_of_switches === 0) return;
      this.addHighlightdiv();
      this.log("start");
      this.registerCallbacks();
      this.showHighlightdiv();
      this.runtime.next_element_idx = 0;
      this.moveToNextElement();
      if (this.options.number_of_switches === 1) this.startSingleSwitchTimer();
      return this.runtime.action_triggered = false;
    };

    SwitchAccess.prototype.stop = function() {
      this.log("stop");
      this.hideHighlightdiv();
      return this.stopSingleSwitchTimer();
    };

    SwitchAccess.prototype.moveToNextElement = function() {
      if (this.runtime.element_list.length < (this.runtime.next_element_idx + 1)) {
        this.runtime.next_element_idx = 0;
      }
      this.log("moveToNextElement IDX: " + this.runtime.next_element_idx);
      if (this.runtime.current_element !== null) {
        this.runtime.current_element.removeClass(this.options.activate_element_class);
        this.runtime.current_element.removeClass(this.options.highlight_element_class);
      }
      this.runtime.current_element_idx = this.runtime.next_element_idx;
      this.runtime.action_triggered = true;
      this.runtime.current_element = $(this.runtime.element_list[this.runtime.current_element_idx]);
      this.runtime.current_element.addClass(this.options.highlight_element_class);
      this.highLightElement($(this.runtime.element_list[this.runtime.current_element_idx]));
      this.makeElementVisible($(this.runtime.element_list[this.runtime.current_element_idx]));
      this.runtime.next_element_idx++;
      this.runtime.current_element.trigger("switch_access-move", [this.runtime.current_element, this.runtime.current_element_idx + 1]);
      return 1;
    };

    SwitchAccess.prototype.highLightElement = function(element) {
      var coords, size;
      if (!this.options.use_highlight_div) return;
      this.log("highLightElement IDX: " + this.runtime.current_element_idx + " Tag: " + (element.get(0).tagName.toLowerCase()) + " classes: " + (element.attr("class")));
      coords = [];
      size = [];
      size["width"] = element.outerWidth(false) + (this.options.margin_to_element * 2);
      size["height"] = element.outerHeight(false) + (this.options.margin_to_element * 2);
      coords["left"] = element.offset().left - this.options.margin_to_element - ((this.runtime.highlightdiv.outerWidth() - this.runtime.highlightdiv.innerWidth()) / 2);
      coords["top"] = element.offset().top - this.options.margin_to_element - ((this.runtime.highlightdiv.outerWidth() - this.runtime.highlightdiv.innerWidth()) / 2);
      this.runtime.highlightdiv.width(size["width"]);
      this.runtime.highlightdiv.height(size["height"]);
      this.runtime.highlightdiv.offset({
        top: coords["top"],
        left: coords["left"]
      });
      this.runtime.highlightdiv.fadeIn(this.options.move_fade_delay);
      return this.runtime.highlightdiv.show(this.options.move_fade_delay);
    };

    SwitchAccess.prototype.makeElementVisible = function(element) {
      var diff_to_make_visible, scroll_top, scrollval;
      if (this.options.ensure_visible_element !== true) return;
      this.log("makeElementVisible");
      scrollval = null;
      scroll_top = $(document).scrollTop();
      if (($(window).height() + scroll_top) < (element.offset().top + element.outerHeight() + this.options.scroll_offset)) {
        diff_to_make_visible = (element.offset().top + element.outerHeight() + this.options.scroll_offset) - ($(document).scrollTop() + $(window).height());
        if (diff_to_make_visible > 0) {
          scrollval = diff_to_make_visible + scroll_top;
        }
      } else if (scroll_top > (element.offset().top - this.options.scroll_offset)) {
        if (element.offset().top - this.options.scroll_offset < 0) {
          scrollval = 0;
        } else {
          scrollval = element.offset().top - this.options.scroll_offset;
        }
      }
      if ((scroll_top !== scrollval) && scrollval !== null) {
        if (this.options.animate_scroll_time === 0) {
          return $("html body").scrollTop(scrollval);
        } else {
          return $("html body").animate({
            scrollTop: scrollval
          }, this.options.animate_scroll_time, this.options.easing);
        }
      }
    };

    SwitchAccess.prototype.activateElement = function() {
      var element_to_click;
      this.log("activateElement");
      this.runtime.action_triggered = true;
      if ((this.runtime.current_element.is("a")) || (this.activate_first_link === false)) {
        element_to_click = this.runtime.current_element;
      } else {
        element_to_click = this.runtime.current_element.find("a");
      }
      this.log("Clicked Element: IDX: " + this.runtime.current_element_idx + " Element Tag: " + ($(element_to_click).get(0).tagName.toLowerCase()) + " Text: " + ($(element_to_click).text()));
      if (element_to_click.length > 0) {
        if (this.options.delay_before_activating_element === 0) {
          this.runtime.current_element.trigger("switch_access-activate", [this.runtime.current_element, this.runtime.current_element_idx, element_to_click]);
          element_to_click[0].click();
          if (this.options.number_of_switches === 1) {
            if (this.options.single_switch_restart_on_activate) {
              this.runtime.next_element_idx = 0;
            }
            this.stopSingleSwitchTimer();
            this.startSingleSwitchTimer();
          }
          window.setTimeout(window.__switch_access_sci.removeHighlightCallback, this.options.highlight_on_activate_time);
        } else {
          this.runtime.element_to_click = element_to_click;
          window.setTimeout(window.__switch_access_sci.activateElementCallBack, this.options.delay_before_activating_element);
        }
        this.runtime.current_element.addClass(this.options.activate_element_class);
        if (this.options.use_highlight_div) {
          this.runtime.highlightdiv.addClass(this.options.highlight_element_activate_class);
        }
        return 2;
      } else {
        this.log("Nothing to activate/click... Missing a link within the element or should activate_first_link be true?");
      }
      return 0;
    };

    SwitchAccess.prototype.activateElementCallBack = function() {
      var element_to_click;
      window.__switch_access_sci.log("activateElementCallBack");
      element_to_click = window.__switch_access_sci.runtime.element_to_click;
      window.__switch_access_sci.runtime.current_element.trigger("switch_access-activate", [window.__switch_access_sci.runtime.runtime.current_element, window.__switch_access_sci.runtime.runtime.current_element_idx, element_to_click]);
      element_to_click[0].click();
      if (window.__switch_access_sci.options.number_of_switches === 1) {
        if (window.__switch_access_sci.options.single_switch_restart_on_activate) {
          window.__switch_access_sci.runtime.next_element_idx = 0;
        }
        window.__switch_access_sci.stopSingleSwitchTimer();
        window.__switch_access_sci.startSingleSwitchTimer();
      }
      return timeout(window.__switch_access_sci.removeHighlightCallback, window.__switch_access_sci.options.highlight_on_activate_time);
    };

    SwitchAccess.prototype.singleSwitchTimerCallback = function() {
      window.__switch_access_sci.log("singleSwitchTimerCallback");
      return window.__switch_access_sci.moveToNextElement();
    };

    SwitchAccess.prototype.allowKeyPressCallback = function() {
      window.__switch_access_sci.log("allowKeyPressCallback");
      return window.__switch_access_sci.runtime.keypress_allowed = true;
    };

    SwitchAccess.prototype.removeHighlightCallback = function() {
      window.__switch_access_sci.log("removeHighlightCallback");
      if (window.__switch_access_sci.options.use_highlight_div) {
        window.__switch_access_sci.runtime.highlightdiv.removeClass(window.__switch_access_sci.options.highlight_element_activate_class);
      }
      return window.__switch_access_sci.runtime.current_element.removeClass(window.__switch_access_sci.options.activate_element_class);
    };

    SwitchAccess.prototype.addHighlightdiv = function() {
      var highlightdiv;
      if (!this.options.use_highlight_div) return;
      if ($("div#" + this.options.highlight_element_id).length > 0) return;
      this.log("addHighlightdiv");
      highlightdiv = $("<div id=\"" + this.options.highlight_element_id + "\" class=\"" + this.options.highlight_element_id + "\">&nbsp;</div>");
      highlightdiv.css('position', 'absolute');
      $('body').append(highlightdiv);
      return this.runtime.highlightdiv = $("div#" + this.options.highlight_element_id);
    };

    SwitchAccess.prototype.removeHighlightdiv = function() {
      if (!this.options.use_highlight_div) return;
      this.log("removeHighlightdiv");
      return this.runtime.highlightdiv.remove();
    };

    SwitchAccess.prototype.showHighlightdiv = function() {
      if (!this.options.use_highlight_div) return;
      this.log("showHighlightdiv");
      return this.runtime.highlightdiv.fadeIn(this.options.hide_show_delay);
    };

    SwitchAccess.prototype.hideHighlightdiv = function() {
      if (!this.options.use_highlight_div) return;
      this.log("hideHighlightdiv");
      return this.runtime.highlightdiv.fadeOut(this.options.hide_show_delay);
    };

    SwitchAccess.prototype.callbackForKeyPress = function(event) {
      var action, timeout, _ref, _ref2, _ref3, _ref4, _ref5;
      this.log("callbackForKeyPress keycode: " + event.which + " Allowed: " + this.runtime.keypress_allowed);
      if (this.options.number_of_switches === 0) return;
      action = 0;
      if (this.options.number_of_switches === 1) {
        if (_ref = event.which, __indexOf.call(this.options.keys_1, _ref) >= 0) {
          if (!this.runtime.keypress_allowed) {
            event.stopPropagation();
            return false;
          }
          action = this.activateElement();
        }
      } else if (this.options.number_of_switches === 2) {
        if ((_ref2 = event.which, __indexOf.call(this.options.keys_2[0], _ref2) >= 0) || (_ref3 = event.which, __indexOf.call(this.options.keys_2[1], _ref3) >= 0)) {
          if (!this.runtime.keypress_allowed) {
            event.stopPropagation();
            return false;
          }
        }
        if (_ref4 = event.which, __indexOf.call(this.options.keys_2[0], _ref4) >= 0) {
          action = this.moveToNextElement();
        }
        if (_ref5 = event.which, __indexOf.call(this.options.keys_2[1], _ref5) >= 0) {
          action = this.activateElement();
        }
      }
      if (this.runtime.action_triggered) {
        this.runtime.action_triggered = false;
        this.runtime.keypress_allowed = false;
        timeout = this.options.delay_for_allowed_keypress;
        if (action === 2) {
          if (this.options.number_of_switches === 1) {
            if (this.options.single_switch_move_time > this.options.delay_before_activating_element) {
              timeout = this.options.single_switch_move_time;
            } else {
              timeout = this.options.delay_before_activating_element;
            }
          } else {
            if (this.options.delay_before_activating_element > timeout) {
              timeout = this.options.delay_before_activating_element;
            }
          }
        }
        window.setTimeout(window.__switch_access_sci.allowKeyPressCallback, timeout);
        event.stopPropagation();
        return false;
      } else {
        return true;
      }
    };

    SwitchAccess.prototype.startSingleSwitchTimer = function() {
      this.log("startSingleSwitchTimer");
      return this.runtime.single_switch_timer_id = window.setInterval(window.__switch_access_sci.singleSwitchTimerCallback, this.options.single_switch_move_time);
    };

    SwitchAccess.prototype.stopSingleSwitchTimer = function() {
      this.log("stopSingleSwitchTimer");
      return window.clearInterval(this.runtime.single_switch_timer_id);
    };

    SwitchAccess.prototype.registerCallbacks = function() {
      this.log("registerCallbacks");
      return $(document).on("keypress", function(event) {
        return window.__switch_access_sci.callbackForKeyPress(event);
      });
    };

    return SwitchAccess;

  })();

  window.SwitchAccess = SwitchAccess;

}).call(this);
