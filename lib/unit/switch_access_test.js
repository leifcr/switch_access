// Generated by CoffeeScript 1.4.0
(function() {

  QUnit.module('One Switch, 2 groups with 3 elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 1,
          delay_for_allowed_keypress: 0,
          single_switch_move_time: 100
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 1, function() {
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should move to the second element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true);
      return start();
    }), 125);
  });

  QUnit.test('It should move back to the first element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
      return start();
    }), 225);
  });

  if (typeof jQuery.browser.mozilla === "undefined") {
    QUnit.test('It should activate the first link in the first group', 2, function() {
      equal($('.switch-element-1').hasClass('current'), true);
      Helper.trigger_key_event(13);
      Helper.trigger_key_event(13);
      equal(/#group-1-switch-element-1/.test(document.URL), true);
    });
    QUnit.test('It should activate the link on the third element in the second group', 5, function() {
      stop();
      setTimeout((function() {
        equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true, "Group 1 child should all have current class");
        Helper.trigger_key_event(32);
        return setTimeout((function() {
          equal($('.switch-element-2.test-group').find(".switch-element-1").hasClass('current'), false, "switch-element-1 should NOT be current");
          equal($('.switch-element-2.test-group').find(".switch-element-2").hasClass('current'), false, "switch-element-2 should NOT be current");
          equal($('.switch-element-2.test-group').find(".switch-element-3").hasClass('current'), true, "switch-element-3 should be current");
          Helper.trigger_key_event(32);
          console.log(document.URL);
          equal(/#group-2-switch-element-3/.test(document.URL), true);
          return start();
        }), 225);
      }), 125);
    });
  }

  QUnit.module('One Switch, single elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_elements(1, 3);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 1,
          delay_for_allowed_keypress: 0,
          single_switch_move_time: 100
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 4, function() {
    equal($('.switch-element-1').hasClass('current'), true);
    equal($($('.highlighter')[0]).hasClass('current'), true);
    equal($($('.highlighter')[1]).hasClass('current'), false);
    equal($($('.highlighter')[2]).hasClass('current'), false);
  });

  QUnit.test('It should move to the second element', 4, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-2').hasClass('current'), true);
      equal($($('.highlighter')[0]).hasClass('current'), false);
      equal($($('.highlighter')[1]).hasClass('current'), true);
      equal($($('.highlighter')[2]).hasClass('current'), false);
      return start();
    }), 125);
  });

  QUnit.test('It should move to the third element', 4, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-3').hasClass('current'), true);
      equal($($('.highlighter')[0]).hasClass('current'), false);
      equal($($('.highlighter')[1]).hasClass('current'), false);
      equal($($('.highlighter')[2]).hasClass('current'), true);
      return start();
    }), 225);
  });

  QUnit.test('It should move back to the first element', 4, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-1').hasClass('current'), true);
      equal($($('.highlighter')[0]).hasClass('current'), true);
      equal($($('.highlighter')[1]).hasClass('current'), false);
      equal($($('.highlighter')[2]).hasClass('current'), false);
      return start();
    }), 325);
  });

  if (typeof jQuery.browser.mozilla === "undefined") {
    QUnit.test('It should activate the link within the first element', 2, function() {
      equal($('.switch-element-1').hasClass('current'), true);
      Helper.trigger_key_event(13);
      equal(/#switch-element-1/.test(document.URL), true, "URL should contain #switch-element-1");
    });
    QUnit.test('It should activate the link within the second element', 2, function() {
      stop();
      setTimeout((function() {
        Helper.trigger_key_event(13);
        equal($('.switch-element-2').hasClass('current'), true);
        equal(/#switch-element-2/.test(document.URL), true);
        return start();
      }), 125);
    });
  }

  if (typeof window.Helper === "undefined") {
    window.Helper = {
      create_switch_elements: function(startnum, element_count, prepend_switch_href) {
        var elements, i;
        if (prepend_switch_href == null) {
          prepend_switch_href = "";
        }
        elements = [];
        i = startnum;
        while (i < (startnum + element_count)) {
          elements.push(Helper.create_switch_element(i, prepend_switch_href));
          i++;
        }
        return elements;
      },
      create_switch_group_with_elements: function(element_count, element_startnum, groupnum) {
        var group;
        group = Helper.create_switch_group(groupnum);
        group.append(Helper.create_switch_elements(element_startnum, element_count, "group-" + groupnum + "-"));
        return group;
      },
      create_switch_groups_with_elements: function(group_count, startnum, element_count, element_start_number, start_at_zero_for_elements) {
        var current_switch_element_startnum, groups, i;
        groups = [];
        i = startnum;
        current_switch_element_startnum = element_start_number;
        while (i < (startnum + group_count)) {
          groups.push(Helper.create_switch_group_with_elements(element_count, current_switch_element_startnum, i));
          if (start_at_zero_for_elements !== true) {
            current_switch_element_startnum += element_count;
          }
          i++;
        }
        return groups;
      },
      create_switch_element: function(number, prepend_switch_href) {
        var ret;
        if (prepend_switch_href == null) {
          prepend_switch_href = "";
        }
        ret = $("<div />");
        ret.addClass("switch-element-" + number).addClass("test-element");
        ret.append($("<a href=\"#" + prepend_switch_href + "switch-element-" + number + "\"></a>").text("Switch Element " + number));
        return ret;
      },
      create_switch_group: function(number) {
        var ret;
        ret = $("<div />");
        ret.addClass("switch-element-" + number).addClass("test-group").text("Switch Group " + number);
        return ret;
      },
      trigger_key_event: function(key_code) {
        var event;
        event = $.Event("keydown");
        event.which = key_code;
        return $(document).trigger(event);
      }
    };
  }

  QUnit.module('Two Switches, 2 groups with 3 elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 2,
          delay_for_allowed_keypress: 0
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first group and the groups children should be marked as "current"', 1, function() {
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should move to the second group', 1, function() {
    Helper.trigger_key_event(32);
    equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should go inside the first group', 3, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
  });

  QUnit.test('It should move through the three child elements in the first group', 9, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), true);
  });

  QUnit.test('It should move back to the group and highlight the three children', 4, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  if (typeof jQuery.browser.mozilla === "undefined") {
    QUnit.test('It should activate the link on the third element in the second group', 1, function() {
      Helper.trigger_key_event(32);
      Helper.trigger_key_event(13);
      Helper.trigger_key_event(32);
      Helper.trigger_key_event(32);
      Helper.trigger_key_event(13);
      equal(/#group-2-switch-element-3/.test(document.URL), true, "The url should contain #group-2-switch-element-3");
    });
  }

  QUnit.module('Callback test - Two Switches, 2 groups with 3 elements', {
    setup: function() {
      var elements;
      this.callbacks = {
        activate: 0,
        move: 0,
        enter_group: 0,
        leave_group: 0,
        idx: 0
      };
      elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 2,
          delay_for_allowed_keypress: 0
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should have one callback for moving to the second group', 3, function() {
    var _this = this;
    stop();
    $('.switch-element-2.test-group').on("switch-access-move", function(event, param1, param2, param3) {
      equal(param1, 1, "the index should be 1");
      equal(param2, 0, "the level should be 0");
      _this.callbacks.move++;
      equal(_this.callbacks.move, 1);
      $('.switch-element-2.test-group').off("switch-access-move");
      return start();
    });
    Helper.trigger_key_event(32);
  });

  QUnit.test('It should have two callbacks for moving to the second group and back', 6, function() {
    var _this = this;
    stop();
    $('.switch-element-1.test-group').on("switch-access-move", function(event, param1, param2, param3) {
      equal(param1, 0, "the index should be 1");
      equal(param2, 0, "the level should be 0");
      _this.callbacks.move++;
      equal(_this.callbacks.move, 2);
      $('.switch-element-1.test-group').off("switch-access-move");
      return start();
    });
    $('.switch-element-2.test-group').on("switch-access-move", function(event, param1, param2, param3) {
      equal(param1, 1, "the index should be 1");
      equal(param2, 0, "the level should be 0");
      _this.callbacks.move++;
      equal(_this.callbacks.move, 1);
      return $('.switch-element-2.test-group').off("switch-access-move");
    });
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
  });

  QUnit.test('It should trigger enter group and leave group callbacks + callbacks moving inside the group', 11, function() {
    var _this = this;
    stop();
    $('.switch-element-1.test-group').on("switch-access-enter-group", function(event, param1, param2, param3) {
      equal(param1, 0, "Entered Group: the index should be 0");
      equal(param2, 1, "Entered Group: the level should be 1");
      $('.switch-element-1.test-group').off("switch-access-enter-group");
      return _this.callbacks.enter_group++;
    });
    $('.switch-element-1.test-group').on("switch-access-leave-group", function(event, param1, param2, param3) {
      _this.callbacks.leave_group++;
      equal(param1, 0, "Left Group: the index should be 0");
      equal(param2, 0, "Left Group: the level should be 0");
      equal(_this.callbacks.move, 2, "Left Group: Should have moved twice before leaving groups");
      equal(_this.callbacks.enter_group, 1, "Left Group: Should have entered 1 group");
      equal(_this.callbacks.leave_group, 1, "Left Group: Should have left 1 group");
      $('.switch-element-1.test-group').off("switch-access-leave-group");
      $('.switch-element-1.test-group').find('[class*=switch-element-]').off("switch-access-move");
      return start();
    });
    $('.switch-element-1.test-group').find('[class*=switch-element-]').on("switch-access-move", function(event, param1, param2, param3) {
      _this.callbacks.move++;
      _this.callbacks.idx++;
      equal(param1, _this.callbacks.idx, "Inside Group: the child index should be " + _this.callbacks.idx);
      return equal(param2, 1, "Inside Group: the level should be 1");
    });
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
  });

  QUnit.test('It should have one callback for activating an element', 2, function() {
    var _this = this;
    stop();
    $('.switch-element-1').on("switch-access-activate", function(event, param1, param2, param3) {
      equal(param1, 0, "the index should be 0");
      equal(param2, 1, "the level should be 1");
      $('.switch-element-1').off("switch-access-activate");
      return start();
    });
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(13);
  });

  QUnit.module('Two Switches, single elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_elements(1, 3);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 2,
          delay_for_allowed_keypress: 0
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 4, function() {
    equal($('.switch-element-1').hasClass('current'), true);
    equal($($('.highlighter')[0]).hasClass('current'), true);
    equal($($('.highlighter')[1]).hasClass('current'), false);
    equal($($('.highlighter')[2]).hasClass('current'), false);
  });

  QUnit.test('It should move to the second element', 4, function() {
    Helper.trigger_key_event(32);
    equal($('.switch-element-2').hasClass('current'), true);
    equal($($('.highlighter')[0]).hasClass('current'), false);
    equal($($('.highlighter')[1]).hasClass('current'), true);
    equal($($('.highlighter')[2]).hasClass('current'), false);
  });

  QUnit.test('It should move to the third element', 4, function() {
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-3').hasClass('current'), true);
    equal($($('.highlighter')[0]).hasClass('current'), false);
    equal($($('.highlighter')[1]).hasClass('current'), false);
    equal($($('.highlighter')[2]).hasClass('current'), true);
  });

  QUnit.test('It should move back to the first element', 4, function() {
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1').hasClass('current'), true);
    equal($($('.highlighter')[0]).hasClass('current'), true);
    equal($($('.highlighter')[1]).hasClass('current'), false);
    equal($($('.highlighter')[2]).hasClass('current'), false);
  });

  if (typeof jQuery.browser.mozilla === "undefined") {
    QUnit.test('It should activate the link within the first element', 2, function() {
      equal($('.switch-element-1').hasClass('current'), true);
      Helper.trigger_key_event(13);
      equal(/#switch-element-1/.test(document.URL), true);
    });
    QUnit.test('It should activate the link within the second element', 2, function() {
      Helper.trigger_key_event(32);
      equal($('.switch-element-2').hasClass('current'), true);
      Helper.trigger_key_event(13);
      equal(/#switch-element-2/.test(document.URL), true);
    });
  }

  QUnit.module('Options tests', {
    setup: function() {
      this.option_events = {
        activate: 0,
        move: 0,
        enter_group: 0,
        leave_group: 0,
        idx: 0
      };
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should not allow keypresses before delay has timed out', 10, function() {
    var elements,
      _this = this;
    elements = Helper.create_switch_elements(1, 2);
    $('#qunit-fixture').append(elements);
    this.sw_access = new SwitchAccess({
      debug: false,
      switches: {
        number_of_switches: 2,
        delay_for_allowed_keypress: 250
      },
      visual: {
        ensure_visible_element: false
      }
    });
    stop();
    $('.switch-element-1').on("switch-access-move", function(event, param1, param2, param3) {
      equal(param1, 0, "the index should be 0");
      equal(param2, 0, "the level should be 0");
      _this.option_events.move++;
      return equal(_this.option_events.move, 2, "should have moved twice, moving back to switch-element-1");
    });
    $('.switch-element-2').on("switch-access-move", function(event, param1, param2, param3) {
      equal(param1, 1, "the index should be 1");
      equal(param2, 0, "the level should be 0");
      _this.option_events.move++;
      return equal(_this.option_events.move, 1, "should have moved once, moving to switch-element-2");
    });
    Helper.trigger_key_event(32);
    setTimeout((function() {
      Helper.trigger_key_event(32);
      return equal(_this.option_events.move, 1, "after 25 ms it should have moved once, blocking keypresses");
    }), 25);
    setTimeout((function() {
      Helper.trigger_key_event(32);
      return equal(_this.option_events.move, 1, "after 50 ms it should have moved once, blocking keypresses");
    }), 50);
    setTimeout((function() {
      Helper.trigger_key_event(32);
      return equal(_this.option_events.move, 1, "after 75 ms it should have moved once, blocking keypresses");
    }), 75);
    setTimeout((function() {
      return Helper.trigger_key_event(32);
    }), 275);
    setTimeout((function() {
      equal(_this.option_events.move, 2, "should have moved twice");
      $('.switch-element-1').off("switch-access-move");
      $('.switch-element-2').off("switch-access-move");
      return start();
    }), 300);
  });

  QUnit.test('It should not use groups, even if groups are on the page', 14, function() {
    var elements,
      _this = this;
    elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
    $('#qunit-fixture').append(elements);
    this.sw_access = new SwitchAccess({
      debug: false,
      switches: {
        number_of_switches: 2,
        delay_for_allowed_keypress: 0,
        groups: false
      },
      visual: {
        ensure_visible_element: false
      }
    });
    stop();
    $('[class*=switch-element-]').on("switch-access-enter-group", function(event, param1, param2, param3) {
      _this.option_events.enter_group++;
    });
    $('[class*=switch-element-]').on("switch-access-leave-group", function(event, param1, param2, param3) {
      _this.option_events.leave_group++;
    });
    $('[class*=switch-element-]').on("switch-access-move", function(event, param1, param2, param3) {
      _this.option_events.idx++;
      _this.option_events.move++;
      equal(param2, 0, "The level should be 0");
      equal(param1, _this.option_events.idx, "The index should be " + _this.option_events.idx);
    });
    $('[class*=switch-element-]').on("switch-access-activate", function(event, param1, param2, param3) {
      _this.option_events.activate++;
    });
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    $('[class*=switch-element-]').off("switch-access-activate");
    $('[class*=switch-element-]').off("switch-access-move");
    $('[class*=switch-element-]').off("switch-access-enter-group");
    $('[class*=switch-element-]').off("switch-access-leave-group");
    setTimeout((function() {
      equal(_this.option_events.enter_group, 0, "No groups should have been entered");
      equal(_this.option_events.leave_group, 0, "No groups should have been left");
      equal(_this.option_events.activate, 3, "3 activations should have been triggered");
      equal(_this.option_events.move, 5, "5 moves should have been triggered");
      return start();
    }), 50);
  });

}).call(this);
