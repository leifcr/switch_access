// Generated by CoffeeScript 1.4.0
(function() {

  QUnit.module('One Switch, 2 groups with 3 elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 1,
          delay_for_allowed_keypress: 0,
          single_switch_move_time: 100
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 1, function() {
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should move to the second element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true);
      return start();
    }), 125);
  });

  QUnit.test('It should move back to the first element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
      return start();
    }), 225);
  });

  QUnit.test('It should activate the first link in the first group', 2, function() {
    equal($('.switch-element-1').hasClass('current'), true);
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(13);
    equal(/#group-1-switch-element-1/.test(document.URL), true);
  });

  QUnit.test('It should activate the link on the third element in the second group', 5, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true, "Group 1 child should all have current class");
      Helper.trigger_key_event(32);
      return setTimeout((function() {
        equal($('.switch-element-2.test-group').find(".switch-element-1").hasClass('current'), false, "switch-element-1 should NOT be current");
        equal($('.switch-element-2.test-group').find(".switch-element-2").hasClass('current'), false, "switch-element-2 should NOT be current");
        equal($('.switch-element-2.test-group').find(".switch-element-3").hasClass('current'), true, "switch-element-3 should be current");
        Helper.trigger_key_event(32);
        console.log(document.URL);
        equal(/#group-2-switch-element-3/.test(document.URL), true);
        return start();
      }), 225);
    }), 125);
  });

  QUnit.module('One Switch, single elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_elements(1, 3);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 1,
          delay_for_allowed_keypress: 0,
          single_switch_move_time: 100
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 2, function() {
    equal($('.switch-element-1').hasClass('switch-element-1'), true);
    equal($('.switch-element-1').hasClass('current'), true);
  });

  QUnit.test('It should move to the second element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-2').hasClass('current'), true);
      return start();
    }), 125);
  });

  QUnit.test('It should move to the third element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-3').hasClass('current'), true);
      return start();
    }), 225);
  });

  QUnit.test('It should move back to the first element', 1, function() {
    stop();
    setTimeout((function() {
      equal($('.switch-element-1').hasClass('current'), true);
      return start();
    }), 325);
  });

  QUnit.test('It should activate the link within the first element', 2, function() {
    equal($('.switch-element-1').hasClass('current'), true);
    Helper.trigger_key_event(13);
    console.log(document.URL);
    equal(/#switch-element-1/.test(document.URL), true);
  });

  QUnit.test('It should activate the link within the second element', 2, function() {
    stop();
    setTimeout((function() {
      Helper.trigger_key_event(13);
      equal($('.switch-element-2').hasClass('current'), true);
      equal(/#switch-element-2/.test(document.URL), true);
      return start();
    }), 125);
  });

  if (typeof window.Helper === "undefined") {
    window.Helper = {
      create_switch_elements: function(startnum, element_count, prepend_switch_href) {
        var elements, i;
        if (prepend_switch_href == null) {
          prepend_switch_href = "";
        }
        elements = [];
        i = startnum;
        while (i < (startnum + element_count)) {
          elements.push(Helper.create_switch_element(i, prepend_switch_href));
          i++;
        }
        return elements;
      },
      create_switch_group_with_elements: function(element_count, element_startnum, groupnum) {
        var group;
        group = Helper.create_switch_group(groupnum);
        group.append(Helper.create_switch_elements(element_startnum, element_count, "group-" + groupnum + "-"));
        return group;
      },
      create_switch_groups_with_elements: function(group_count, startnum, element_count, element_start_number, start_at_zero_for_elements) {
        var current_switch_element_startnum, groups, i;
        groups = [];
        i = startnum;
        current_switch_element_startnum = element_start_number;
        while (i < (startnum + group_count)) {
          groups.push(Helper.create_switch_group_with_elements(element_count, current_switch_element_startnum, i));
          if (start_at_zero_for_elements !== true) {
            current_switch_element_startnum += element_count;
          }
          i++;
        }
        return groups;
      },
      create_switch_element: function(number, prepend_switch_href) {
        var ret;
        if (prepend_switch_href == null) {
          prepend_switch_href = "";
        }
        ret = $("<div />");
        ret.addClass("switch-element-" + number).addClass("test-element");
        ret.append($("<a href=\"#" + prepend_switch_href + "switch-element-" + number + "\"></a>").text("Switch Element " + number));
        return ret;
      },
      create_switch_group: function(number) {
        var ret;
        ret = $("<div />");
        ret.addClass("switch-element-" + number).addClass("test-group").text("Switch Group " + number);
        return ret;
      },
      trigger_key_event: function(key_code) {
        var event;
        event = $.Event("keypress");
        event.which = key_code;
        return $(document).trigger(event);
      }
    };
  }

  QUnit.module('Two Switches, 2 groups with 3 elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_groups_with_elements(2, 1, 3, 1, true);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 2,
          delay_for_allowed_keypress: 0
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first group and the groups children should be marked as "current"', 1, function() {
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should move to the second group', 1, function() {
    Helper.trigger_key_event(32);
    equal($('.switch-element-2.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should go inside the first group', 3, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
  });

  QUnit.test('It should move through the three child elements in the first group', 9, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), true);
  });

  QUnit.test('It should move back to the group and highlight the three children', 4, function() {
    Helper.trigger_key_event(13);
    equal($('.switch-element-1.test-group').find(".switch-element-1").hasClass('current'), true);
    equal($('.switch-element-1.test-group').find(".switch-element-2").hasClass('current'), false);
    equal($('.switch-element-1.test-group').find(".switch-element-3").hasClass('current'), false);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1.test-group').find("[class*=switch-element-]").hasClass('current'), true);
  });

  QUnit.test('It should activate the link on the third element in the second group', 1, function() {
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(13);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(13);
    equal(/#group-2-switch-element-3/.test(document.URL), true);
  });

  QUnit.module('Two Switches, single elements', {
    setup: function() {
      var elements;
      elements = Helper.create_switch_elements(1, 3);
      $('#qunit-fixture').append(elements);
      this.sw_access = new SwitchAccess({
        debug: false,
        switches: {
          number_of_switches: 2,
          delay_for_allowed_keypress: 0
        },
        visual: {
          ensure_visible_element: false
        }
      });
      if (this.sw_access.options.debug) {
        $('#outerlogger').show();
      }
    },
    teardown: function() {
      this.sw_access.destroy();
    }
  });

  QUnit.test('It should start at the first element', 2, function() {
    equal($('.switch-element-1').hasClass('switch-element-1'), true);
    equal($('.switch-element-1').hasClass('current'), true);
  });

  QUnit.test('It should move to the second element', 1, function() {
    Helper.trigger_key_event(32);
    equal($('.switch-element-2').hasClass('current'), true);
  });

  QUnit.test('It should move to the third element', 1, function() {
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-3').hasClass('current'), true);
  });

  QUnit.test('It should move back to the first element', 1, function() {
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    Helper.trigger_key_event(32);
    equal($('.switch-element-1').hasClass('current'), true);
  });

  QUnit.test('It should activate the link within the first element', 2, function() {
    equal($('.switch-element-1').hasClass('current'), true);
    Helper.trigger_key_event(13);
    equal(/#switch-element-1/.test(document.URL), true);
  });

  QUnit.test('It should activate the link within the second element', 2, function() {
    Helper.trigger_key_event(32);
    equal($('.switch-element-2').hasClass('current'), true);
    Helper.trigger_key_event(13);
    equal(/#switch-element-2/.test(document.URL), true);
  });

}).call(this);
